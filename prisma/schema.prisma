generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType{
  INDIVIDUAL
  ORGANIZATION
}

// TODO : Quiz related models
// TODO : Marketplace related models

model User{
  id String @id @unique
  first_name String
  last_name String
  email String
  profile_image String?
  role UserType
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  balance Int? @default(0)
  attendees Attendees[]
  recipent_transactions Transactions[] @relation(name: "recipent")
  payer_transactions Transactions[] @relation(name: "payer")
  videos Videos[]
  video_likes Video_likes[]
  video_views Video_views[]
}
model Organization{
  org_id String @id @unique
  name String
  description String
  founder_name String
  email String
  phone String
  address String
  city String
  state String
  country String
  events Event[]
}

model Event{
  event_id String @id @unique @default(cuid())
  organizer_id String 
  event_name String
  event_description String
  event_banner_url String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  start_date DateTime? @db.Timestamp()
  end_date  DateTime? @db.Timestamp()
  address String
  city String
  state String
  country String
  pincode Int
  is_completed Boolean @default(false)
  registrants_count Int @default(0)
  attendees_count Int @default(0)
  organizer Organization @relation(fields: [organizer_id],references: [org_id],onDelete: Cascade)
  images Event_Images[]
  attendees Attendees[]
}

model Event_Images{
  event_img_id String @id @default(cuid())
  event_id String
  event_image_url String?
  alt_text String?
  event Event @relation(fields: [event_id],references: [event_id],onDelete:Cascade )
}

model Attendees{
  id String @id @unique
  event_id String
  user_id String
  is_present Boolean @default(false)
  registered_at DateTime @db.Timestamp() @default(now())
  event Event @relation(fields: [event_id],references: [event_id],onDelete: Cascade)
  user User @relation(fields: [user_id],references: [id],onDelete: Cascade)
}

model Transactions{
  transaction_id String @id @unique @default(cuid())
  payer_id String
  recipent_id String
  date DateTime @default(now())
  source String
  amount Int
  recipent User @relation(name: "recipent",fields: [recipent_id],references: [id],onDelete: Cascade)
  payer User @relation(name : "payer", fields: [payer_id], references: [id],onDelete: Cascade)
}


// TODO : Define an enum of category
enum videoCategory{
  RENEWABLE_ENERGY
  ENERGY_EFFICIENCY
  WASTE_REDUCTION_AND_RECYCLING
  SUSTAINABLE_TRANSPORTATION
  SUSTAINABLE_AGRICULTURE_AND_FOOD
  WATER_CONSERVATION
  GREEN_BUILDING_AND_CONSTRUCTION
  SUSTAINABLE_FASHION
  SUSTAINABLE_LIVING
  EDUCATION
  COMMUNITY_INITIATIVES
}

model Videos{
  video_id String @id @unique @default(cuid())
  creator_id String 
  title String
  description String?
  category videoCategory
  thumbnail_img_url String?
  video_url String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  like_count Int @default(0)
  view_count Int @default(0)
  comment_count Int @default(0)
  user User @relation(fields: [creator_id],references: [id])
  likes Video_likes[] 
  comments Video_comments[]
  views Video_views[]
}

model Video_likes{
  like_id String @id @unique @default(cuid())
  video_id String
  user_id String 
  liked_at DateTime @default(now())
  video Videos @relation(fields: [video_id],references: [video_id],onDelete: Cascade)
  user User @relation(fields : [user_id], references: [id], onDelete: Cascade)
}

model Video_comments{
  comment_id String @id @unique @default(cuid())
  video_id String
  user_id String
  comment String
  commented_at DateTime @default(now())
  video Videos @relation(fields: [video_id],references: [video_id],onDelete: Cascade)
}

model Video_views{
  view_id String @id @unique @default(cuid())
  video_id String
  user_id String
  viewed_at DateTime @default(now())
  video Videos @relation(fields: [video_id],references: [video_id],onDelete: Cascade)
  user User @relation(fields: [user_id] ,references: [id], onDelete: Cascade)
}

// TODO : Define a enum for PRODUCT categories
enum productCategory{
  RECYCLING_BOTTLES
  BAGS
  PLASTICS
  CARDBOARDS
  DIY
  CLOTHES
  PAPER
  GLASS
  ACCESSORIES
  HOME_DECOR
  ART_CRAFT
}